{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","_this$props","this","props","item","handleChange","handleSubmit","editItem","react_default","a","createElement","className","onSubmit","type","placeholder","value","onChange","Component","TodoItem","title","handleDelete","handleEdit","onClick","TodoList","items","clearList","map","TodoItem_TodoItem","key","id","App","state","uuid","e","_this","setState","target","preventDefault","newItem","updateItems","concat","Object","toConsumableArray","filteredItems","filter","selectedItem","find","console","log","TodoInput_TodoInput","TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a3de0a8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class TodoInput extends Component {\r\n\r\n\r\n  render() {\r\n    const {item, handleChange, handleSubmit, editItem} = this.props;\r\n    return (\r\n      <div className=\"card card-body my-3\">\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"input-group\">\r\n            <div className=\"input-group-prepend\">\r\n              <div className=\"input-group-text bg-primary text-white\">\r\n                <i className=\"fas fa-clipboard-list\" />\r\n              </div>\r\n            </div>\r\n            <input type=\"text\"\r\n             className=\"form-control text-pritalize\" \r\n              placeholder=\"add a todo item\"\r\n              value={item}\r\n              onChange={handleChange}\r\n             />\r\n          </div>\r\n          <button \r\n          type=\"submit\" \r\n          className={editItem?\"btn btn-block btn-success mt-3\":\"btn btn-block btn-primary mt-3\"}>\r\n          {editItem ? \"Edit Item\":\"Add item\"}</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class TodoItem extends Component {\r\n  render() {\r\nconst {title, handleDelete, handleEdit} = this.props;\r\n\r\n\r\n    return (\r\n      <li className=\"list-group-item text-capatalize d-flex justify-content-between my-2\">\r\n        <h6>{title}</h6>\r\n        <div className=\"todo-icon\">\r\n          <span className=\"mx-2 text-success\" onClick={handleEdit}>\r\n            <i className=\"fas fa-pencil-alt\" />\r\n          </span>\r\n          <span className=\"mx-2 text-danger\" onClick={handleDelete}>\r\n            <i className=\"fas fa-trash\"  />\r\n          </span>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nexport default class TodoList extends Component {\r\n  render() {\r\n    const { items, clearList, handleDelete, handleEdit } = this.props;\r\n    return (\r\n      <div>\r\n        <ul className=\"list-group my-5\">\r\n          <h3 className=\"text-capilatize text-center\">Todo List</h3>\r\n          {items.map(item => {\r\n            return (\r\n              <TodoItem\r\n                key={item.id}\r\n                title={item.title}\r\n                handleDelete={() => handleDelete(item.id)}\r\n                handleEdit={() => handleEdit(item.id)}\r\n              />\r\n            );\r\n          })}\r\n\r\n          <button\r\n            type=\"button\"\r\n            onClick={clearList}\r\n            className=\"btn btn-danger btn-block text-capitalize mt-5\"\r\n          >\r\n            Clear List\r\n          </button>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport TodoInput from \"./components/TodoInput\";\nimport TodoList from \"./components/TodoList\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport uuid from \"uuid\";\n\nclass App extends Component {\n  state = {\n    items: [],\n    id: uuid(),\n    item: \"\",\n    editItem: false\n  };\n  handleChange = e => {\n    this.setState({\n      item: e.target.value\n    });\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    const newItem = {\n      id: this.state.id,\n      title: this.state.item\n    };\n    // console.log(newItem);\n    const updateItems = [...this.state.items, newItem];\n    this.setState({\n      items: updateItems,\n      item: \"\",\n      id: uuid(),\n      editItem: false\n    });\n  };\n\n  clearList = () => {\n    this.setState({\n      items: []\n    });\n    \n  };\n\n  handleDelete = id => {\n    const filteredItems = this.state.items.filter(item => item.id !== id);\n    this.setState({\n      items: filteredItems\n    });\n  };\n  handleEdit = id => {\n    const filteredItems = this.state.items.filter(item => item.id !== id);\n    const selectedItem = this.state.items.find(item => item.id === id);\n    console.log(selectedItem);\n\n    this.setState({\n      items: filteredItems,\n      item: selectedItem.title,\n      editItem: true,\n      id:id\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-10 mx-auto col-md-8 mt-4\">\n            <h3 className=\"text-capilatize text-center\">Todo input</h3>\n            <TodoInput\n              item={this.state.item}\n              handleChange={this.handleChange}\n              handleSubmit={this.handleSubmit}\n              editItem={this.state.editItem}\n            />\n            <TodoList\n              items={this.state.items}\n              clearList={this.clearList}\n              handleDelete={this.handleDelete}\n              handleEdit={this.handleEdit}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}